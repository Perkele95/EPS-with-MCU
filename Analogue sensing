/* ADC Voltmeter for EPS.
 * Continuously monitors voltage and current, both intput and output.
 */

// ------- Preamble -------- //
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include <math.h>                           /* for round() and floor() */

/* Note: REF_VCC is the internal voltage. */
#define REF_VCC 1.1
                               /* measured division by voltage divider */
#define VOLTAGE_DIV_FACTOR  3.114


// -------- Functions --------- //
void initADC(void) {
  ADMUX |= (1 << REFS1);                  /* reference voltage on internal reference */
  ADCSRA |= 1<<ADIE;                            /*  enable interrupt    */
  ADCSRA |= (1 << ADPS1) | (1 << ADPS2);    /* ADC clock prescaler /64 */
  ADCSRA |= 1<<ADEN;                              /* enable ADC */
  ADCSRA |= 1<<ADSC;                          /*  start conversion  */
}

ISR(ADC_vect){
    //get current channel
    uint8_t currentChannel = ADMUX & 0x0F;
    //set output compare registers for current channel
    
    //loop through channels from 0 to 5 
    if(currentChannel == 5)
        selectADCchannel(0x00);
    else
        selectADCchannel(currentChannel+1);
    //restart conversion
    ADCSRA |= 1<<ADSC;
}

uint16_t oversample16x(void) {
  uint16_t oversampledValue = 0;
  uint8_t i;
  for (i = 0; i < 16; i++) {
    sleep_mode();                   /* chip to sleep, takes ADC sample */
    oversampledValue += ADC;                        /* add them up 16x */
  }
  return (oversampledValue >> 2);          /* divide back down by four */
}

int main(void) {

  // ------ variables ------ //
  float voltageIn;
  float currVoltIn1;        /*  currVolt is voltage measured across Rs.  */
  float currVoltIn2;
  float currentIn;
  
  float voltageOut;
  float currVoltOut1;
  float currVoltOut2;
  float currentOut;
  
  float Rsense = 0.01; // 10 milliohm resistors
  float sampleValue;

  // -------- Inits --------- //
  sei();
  // ------ Event loop ------ //

  while (1) {
    initADC();
    voltage = oversample16x() * VOLTAGE_DIV_FACTOR * REF_VCC / 4096;
    
    Rsvoltage1 = oversample16x() * VOLTAGE_DIV_FACTOR * REF_VCC / 4096;
    Rsvoltage2 = oversample16x() * VOLTAGE_DIV_FACTOR * REF_VCC / 4096;
    current = (Rsvoltage1-Rsvoltage2)/Rsense;
    _delay_ms(500);
    
  }                                                  /* End event loop */
  return 0;                            /* This line is never reached */
}
